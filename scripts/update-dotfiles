#!/bin/bash

export DOTFILES=$(cd $(dirname $(readlink -f $0))/.. && pwd)

if [ "$DOTFILES_DEVICE" ]; then
	echo "DEVICE: $DOTFILES_DEVICE"
elif [ "$1" ] && [ -d "$DOTFILES/devices/$1" ]; then
	DOTFILES_DEVICE=$1
else
	echo -e "\n\"$1\" is not a valid device. You can also provide one as an argument, eg: $0 <device>\n\n$(ls $DOTFILES/devices)\n"

	read -p "Enter the device type: " deviceType; exec $(dirname $(readlink -f $0))/$(basename $0) $deviceType

	exit #?
fi

echo "Setting up system variables"

export DOTFILES_DEVICE
export PATH=$PATH:$DOTFILES/scripts/

echo -e "\nexport PATH=\"$PATH\"" | sudo tee /etc/profile.d/02_env.sh
echo -e "\nexport DOTFILES=$DOTFILES" | sudo tee -a /etc/profile.d/02_env.sh
echo -e "\nexport DOTFILES_DEVICE=$DOTFILES_DEVICE" | sudo tee -a /etc/profile.d/02_env.sh

mkdir -p $HOME/Pictures/Wallpapers $HOME/Pictures/Screenshots $HOME/Projects $DOTFILES/temp

groupsToAdd="input dialout"

echo "Adding $USER to groups: $groupsToAdd"

for group in $groupsToAdd; do
	sudo adduser $USER $group
done

echo "Expanding file limits"

ulimit -Sn unlimited
ulimit -Sl unlimited

if [ ! -s "$DOTFILES/temp/.cronSetup" ]; then
	echo "Setting up cron"

	sudo ln -sf $DOTFILES/cron/crontab /etc/crontab

	files=$(find $DOTFILES/cron/hourly/* -type f)

	for file in $files; do
		sudo ln -sf $file /etc/cron.hourly/$(basename $file)
	done

	files=$(find $DOTFILES/cron/daily/* -type f)

	for file in $files; do
		sudo ln -sf $file /etc/cron.daily/$(basename $file)
	done

	echo "1" > $DOTFILES/temp/.cronSetup
fi

if [ ! -s "$DOTFILES/temp/.gitSetup" ]; then
	echo "Setting up git"

	read -p "Enter your git user.name: " username; git config --global user.name $username
	read -p "Enter your git user.email: " email; git config --global user.email $email

	git config --global credential.helper cache
	git config --global credential.helper 'cache --timeout=3600'

	echo "1" > $DOTFILES/temp/.gitSetup
fi

apt-autoupdate

echo "Installing apt packages"

apt-autoinstall curl dnsmasq whois software-properties-common build-essential make autoconf automake speedtest-cli openssh-server arp-scan youtube-dl cu net-tools postfix mailutils uuid-runtime gparted pv python3-dev python3-pip python3-setuptools

sudo pip3 install thefuck

if [ ! -s "$HOME/.nvm" ]; then
	echo "Installing NVM"

	curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash

	export NVM_DIR="$HOME/.nvm"

	[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm

	nvm install --lts

	sudo ln -sf "$NVM_DIR/versions/node/$(nvm version)/bin/node" "/usr/local/bin/node"
	sudo ln -sf "$NVM_DIR/versions/node/$(nvm version)/bin/npm" "/usr/local/bin/npm"

	npm=/usr/local/bin/npm

	sudo setcap 'cap_net_bind_service=+ep' `readlink -f /usr/local/bin/node`
fi

update-dotfiles-bashrc

echo "Installing global npm packages"

globalNpmPackages="pm2"

for package in $globalNpmPackages; do
	npm list -g | grep $package || npm i -g $package
done

echo "Running device setup"

$DOTFILES/devices/$DOTFILES_DEVICE/SETUP

if [ ! -s "$DOTFILES/temp/.dnsmasqSetup" ]; then
	echo "Setting up dnsmasq"

	sudo groupadd -r dnsmasq

	sudo service resolvconf stop

	sudo update-rc.d resolvconf remove

	sudo systemctl stop systemd-resolved
	sudo systemctl disable systemd-resolved

	sudo ln -sf $DOTFILES/dnsmasq/dnsmasq.conf /etc/dnsmasq.conf
	sudo ln -sf $DOTFILES/dnsmasq/resolv.personal /etc/resolv.personal
	sudo ln -sf $DOTFILES/dnsmasq/hosts.adblock /etc/hosts.adblock
	sudo ln -sf $DOTFILES/dnsmasq/NetworkManager.conf /etc/NetworkManager/NetworkManager.conf
	sudo ln -sf $DOTFILES/dnsmasq/dhclient.conf /etc/dhcp/dhclient.conf

	sudo systemctl enable dnsmasq

	sudo service network-manager restart

	sudo service dnsmasq restart

	sudo systemctl restart dnsmasq

	sudo ln -sf /var/run/NetworkManager/resolv.conf /etc/resolv.conf

	echo "1" > $DOTFILES/temp/.dnsmasqSetup
fi

echo "Cleaning apt packages"

sudo apt autoremove --purge -y

sudo apt clean

notify-send "Done updating system!"

echo -e "\nPress enter to reboot now OR Press Ctrl+c to quit and reboot later\n"

read -p ""

sudo reboot