#!/bin/zsh

source "$HOME/.dotfiles/bin/lib/constants"

scriptName=`basename $1`
scriptPath=`dirname $1`

setup_gitconfig () {
  if ! [ -f git/gitconfig.local.symlink ]
  then
    info 'setup gitconfig'

    git_credential='cache'
    if [ "$(uname -s)" == "Darwin" ]
    then
      git_credential='osxkeychain'
    fi

    user ' - What is your github author name?'
    read -e git_authorname
    user ' - What is your github author email?'
    read -e git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/gitconfig.local.symlink.example > git/gitconfig.local.symlink

    success 'gitconfig'
  fi
}

function symlink() {
	OVERWRITTEN=""
	if [ -e "$2" ] || [ -h "$2" ]; then
		OVERWRITTEN="(Overwritten)"
		rm -r "$2"
	fi

	echo "$2 -> $1 $OVERWRITTEN"
	ln -s "$1" "$2"
}

symlink() {
	OVERWRITTEN=""
	if [ -e "$2" ] || [ -h "$2" ]; then
		OVERWRITTEN="(Overwritten)"
		if ! rm -r "$2"; then
			substep_error "Failed to remove existing file(s) at $2."
		fi
	fi
	if ln -s "$1" "$2"; then
		substep_success "Symlinked $2 to $1. $OVERWRITTEN"
	else
		substep_error "Symlinking $2 to $1 failed."
	fi
}

clear_broken_symlinks() {
	find -L "$1" -type l | while read fn; do
		if rm "$fn"; then
			substep_success "Removed broken symlink at $fn."
		else
			substep_error "Failed to remove broken symlink at $fn."
		fi
	done
}

# direct it all to /dev/null
nullify() {
  "$@" >/dev/null 2>&1
}

obtainSudo() {
	echo "Prompting for sudo password..."

	if sudo -v; then
		# Keep-alive: update existing `sudo` time stamp until `setup.sh` has finished
		while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

		echo "Sudo credentials updated."
	else
		echo "Failed to obtain sudo credentials."
	fi
}

enforceSudo(){
	if [[ `whoami` != "root" ]]; then
		echo -e "$(basename $0) needs to be run as root ... Restarting with sudo\n"

		exec sudo $(dirname $(readlink -f $0))/$(basename $0) $@

		exit #?
	fi
}

answer_is_yes() {
	[[ "$REPLY" =~ ^[Yy]$ ]] \
		&& return 0 \
		|| return 1
}

ask() {
	print_question "$1"
	read -r
}

ask_for_confirmation() {
	print_question "$1 (y/n) "
	read -r -n 1
	printf "\n"
}

get_answer() {
    printf "%s" "$REPLY"
}

ask_for_sudo() {

    # Ask for the administrator password upfront.

    sudo -v &> /dev/null

    # Update existing `sudo` time stamp
    # until this script has finished.
    #
    # https://gist.github.com/cowboy/3118588

    while true; do
        sudo -n true
        sleep 60
        kill -0 "$$" || exit
    done &> /dev/null &

}